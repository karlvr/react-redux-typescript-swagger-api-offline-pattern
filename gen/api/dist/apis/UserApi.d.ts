/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { User } from '../models';
export interface CreateUserRequest {
    body: User;
}
export interface CreateUsersWithArrayInputRequest {
    body: Array<User>;
}
export interface CreateUsersWithListInputRequest {
    body: Array<User>;
}
export interface DeleteUserRequest {
    username: string;
}
export interface GetUserByNameRequest {
    username: string;
}
export interface LoginUserRequest {
    username: string;
    password: string;
}
export interface UpdateUserRequest {
    username: string;
    body: User;
}
/**
 * no description
 */
export declare class UserApi extends runtime.BaseAPI {
    /**
     * This can only be done by the logged in user.
     * Create user
     */
    createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * This can only be done by the logged in user.
     * Create user
     */
    createUser(requestParameters: CreateUserRequest): Promise<void>;
    /**
     * Creates list of users with given input array
     */
    createUsersWithArrayInputRaw(requestParameters: CreateUsersWithArrayInputRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Creates list of users with given input array
     */
    createUsersWithArrayInput(requestParameters: CreateUsersWithArrayInputRequest): Promise<void>;
    /**
     * Creates list of users with given input array
     */
    createUsersWithListInputRaw(requestParameters: CreateUsersWithListInputRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * Creates list of users with given input array
     */
    createUsersWithListInput(requestParameters: CreateUsersWithListInputRequest): Promise<void>;
    /**
     * This can only be done by the logged in user.
     * Delete user
     */
    deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * This can only be done by the logged in user.
     * Delete user
     */
    deleteUser(requestParameters: DeleteUserRequest): Promise<void>;
    /**
     * Get user by user name
     */
    getUserByNameRaw(requestParameters: GetUserByNameRequest): Promise<runtime.ApiResponse<User>>;
    /**
     * Get user by user name
     */
    getUserByName(requestParameters: GetUserByNameRequest): Promise<User>;
    /**
     * Logs user into the system
     */
    loginUserRaw(requestParameters: LoginUserRequest): Promise<runtime.ApiResponse<string>>;
    /**
     * Logs user into the system
     */
    loginUser(requestParameters: LoginUserRequest): Promise<string>;
    /**
     * Logs out current logged in user session
     */
    logoutUserRaw(): Promise<runtime.ApiResponse<void>>;
    /**
     * Logs out current logged in user session
     */
    logoutUser(): Promise<void>;
    /**
     * This can only be done by the logged in user.
     * Updated user
     */
    updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<void>>;
    /**
     * This can only be done by the logged in user.
     * Updated user
     */
    updateUser(requestParameters: UpdateUserRequest): Promise<void>;
}
